// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user   @map("user")
  admin  @map("admin")
  client @map("client")
}

enum Stage {
  incoming   @map("incoming")
  inProgress @map("inProgress")
  backlog    @map("backlog")
  completed  @map("completed")
}

enum Impact {
  massive @map("3")
  high    @map("2")
  medium  @map("1")
  low     @map("0.5")
  minimal @map("0.25")
}

enum Confidence {
  high   @map("1")
  medium @map("0.8")
  low    @map("0.5")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  scope             String?
  session_state     String?
  token_type        String?
  id_token          String? @db.Text
  access_token      String? @db.Text
  refresh_token     String? @db.Text
  expires_at        Int?
  provider          String
  providerAccountId String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String      @id @default(cuid())
  name                String?
  email               String      @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  username            String?     @unique
  displayName         String?
  role                Role        @default(user)
  jobTitle            String?
  phoneNumber         String?
  workspaces          Workspace[]
  teams               Team[]
  projects_created    Project[]   @relation("project_createdBy")
  projects_assignedTo Project[]   @relation("project_clients")
  tasks_created       Task[]      @relation("task_createdBy")
  tasks_assignedTo    Task[]      @relation("task_assignedTo")
  messages            Message[]
  comments            Comment[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Workspace {
  id        String   @id @default(cuid())
  title     String   @unique
  logo      String?
  teams     Team[]
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id                String    @id @default(cuid())
  title             String    @unique
  completedProjects Int? // @computed total count of projects completed
  workspace         Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId       String
  projects          Project[]
  users             User[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Project {
  id               String      @id @default(cuid())
  title            String
  description      String?
  isArchived       Boolean     @default(false)
  stage            Stage       @default(incoming)
  tasksCompleted   Int? // @computed (Tasks completed)
  progress         Float? // @computed (Tasks completed / RICE)
  rice             Float? // @computed (Reach * Impact * Confidence) / Effort = RICE
  reach            Int?
  impact           Impact?
  confidence       Confidence?
  effort           Int? // @computed Effort of all of the tasks for this project, i.e. 3 tasks with effort of 1 week, 3 weeks, 5 weeks (EFFORT=9)
  neededBy         DateTime?
  willMeetDeadline Boolean? // @computed (Today + tasks not completed effort) lte<= neededBy i.e. June 1 + 2 weeks (effort) <= June 15
  teams            Team[]
  tasks            Task[]
  messages         Message[]
  createdBy        User        @relation("project_createdBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById      String
  clients          User[]      @relation("project_clients")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  stage       Stage     @default(incoming)
  effort      Int?
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId   String
  messages    Message[]
  createdBy   User      @relation("task_createdBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String
  assignedTo  User[]    @relation("task_assignedTo")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        String    @id @default(cuid())
  content   String
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?
  task      Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId    String?
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messageId String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
